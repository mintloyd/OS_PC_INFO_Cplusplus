#undef UNICODE
#include <windows.h>
#include <stdio.h>
#include "resource.h"
#include <time.h>
#include <chrono>

#define DIV (1024*1024)
#pragma warning(disable : 4996)
   


BOOL CALLBACK MainWndProc(HWND, UINT, WPARAM, LPARAM);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int) {
	DialogBox(hInstance, MAKEINTRESOURCE(IDD_MAINDIALOG), NULL, MainWndProc);
	return 0;
}

void ShowInfo(HWND wnd) {																									//comment test
	char buf[100];
	DWORD size = 100;
	if (!GetComputerName(buf, &size)) strcpy(buf, "error");
	SetDlgItemText(wnd, IDC_PCNAME, buf);

	OSVERSIONINFO ver;
	ver.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
	GetVersionEx(&ver);
	sprintf(buf, "%d.%d (build %d) %s", ver.dwMajorVersion, ver.dwMinorVersion, ver.dwBuildNumber, ver.szCSDVersion);
	SetDlgItemText(wnd, IDC_WINV, buf);

	if (!GetUserName(buf, &size)) strcpy(buf, "error");
	SetDlgItemText(wnd, IDC_USER, buf);

	MEMORYSTATUSEX statex;
	statex.dwLength = sizeof(statex);
	GlobalMemoryStatusEx(&statex);
	sprintf(buf, "%d MB", statex.ullTotalPhys / DIV);
	SetDlgItemText(wnd, IDC_TOTALRAM, buf);

	sprintf(buf, "%d MB", statex.ullAvailPhys / DIV);
	SetDlgItemText(wnd, IDC_AVAILABLERAM, buf);

	sprintf(buf, "%d%%", statex.dwMemoryLoad);
	SetDlgItemText(wnd, IDC_LOADRAM, buf);

	DWORD ticks = GetTickCount();
	DWORD milliseconds = ticks % 1000;
	ticks /= 1000;
	DWORD seconds = ticks % 60;
	ticks /= 60;
	DWORD minutes = ticks % 60;
	ticks /= 60;
	DWORD hours = ticks % 24;
	ticks /= 24;
	DWORD days = ticks;
	sprintf(buf, "%d days %d hours %02d min. %02d sec.", days, hours, minutes, seconds);
	SetDlgItemText(wnd, IDC_PCSTART, buf);

	time_t rawtime;
	struct tm* timeinfo;
	char buffer[80];

	time(&rawtime);
	timeinfo = localtime(&rawtime);
	strftime(buf, 80, "%d.%m.%Y %H:%M:%S", timeinfo);
	SetDlgItemText(wnd, IDC_TIME, buf);

	SYSTEM_POWER_STATUS power;
	power.BatteryLifePercent = sizeof(power);
	GetSystemPowerStatus(&power);
	sprintf(buf, "%d%%", power.BatteryLifePercent);
	SetDlgItemText(wnd, IDC_POWER, buf);

}

BOOL CALLBACK MainWndProc(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam) {
	switch (Msg) {
	case WM_TIMER:
		ShowInfo(hWnd);
		return TRUE;
	case WM_INITDIALOG:
		ShowInfo(hWnd);
		SetTimer(hWnd, NULL, 1000, NULL);
		return TRUE;
	case WM_COMMAND:
		switch (LOWORD(wParam)) {
		case IDOK:
			DestroyWindow(hWnd);
			return TRUE;
		}
		return FALSE;
	case WM_DESTROY:
		PostQuitMessage(0);
		return TRUE;
	}
		return FALSE;
}
